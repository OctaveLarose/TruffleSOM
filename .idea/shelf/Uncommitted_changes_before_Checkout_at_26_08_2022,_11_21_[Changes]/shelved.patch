Index: build.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project name=\"som\" basedir=\".\" default=\"compile\"\n    xmlns:unless=\"ant:unless\"\n    xmlns:if=\"ant:if\"\n    xmlns:jacoco=\"antlib:org.jacoco.ant\">\n\n    <property name=\"labs-jdk\" value=\"labsjdk-ce-17\" />\n\n    <condition property=\"kernel\" value=\"darwin-amd64\" else=\"linux-amd64\">\n        <os family=\"mac\"/>\n    </condition>\n    <condition property=\"home.ext\" value=\"/Contents/Home\" else=\"\">\n        <os family=\"mac\"/>\n    </condition>\n\n    <echo>ant.java.version: ${ant.java.version}\njava.version:     ${java.version}\nkernel:           ${kernel}</echo>\n\n    <property name=\"src.dir\"     location=\"src\"/>\n    <property name=\"src_gen.dir\" location=\"src_gen\"/>\n    <property name=\"lib.dir\"     location=\"libs\" />\n    <property name=\"unit.dir\"    location=\"tests\"/>\n    <property name=\"sdk.dir\"     location=\"${lib.dir}/truffle/sdk\" />\n    <property name=\"sdk.build\"   location=\"${sdk.dir}/mxbuild/dists\" />\n    <property name=\"truffle.dir\" location=\"${lib.dir}/truffle/truffle\" />\n    <property name=\"svm.dir\"     location=\"${lib.dir}/truffle/substratevm\" />\n    <property name=\"vm.dir\"        location=\"${lib.dir}/truffle/vm\" />\n    <property name=\"compiler.dir\"   location=\"${lib.dir}/truffle/compiler\" />\n    <property name=\"compiler.build\" location=\"${compiler.dir}/mxbuild/dists\" />\n    <property name=\"truffle.build\" location=\"${truffle.dir}/mxbuild/dists\" />\n    <property name=\"junit.version\" value=\"4.12\" />\n\n    <property name=\"checkstyle.version\" value=\"8.36\" />\n\n    <property name=\"jvmci.home\"  location=\"${lib.dir}/jvmci${home.ext}\" />\n\n    <property name=\"mx.cmd\" location=\"${lib.dir}/mx/mx\" />\n\n    <property name=\"build.dir\"   value=\"build\"/>\n    <property name=\"classes.dir\" value=\"${build.dir}/classes\"/>\n\n    <property environment=\"env\"/>\n\n    <path id=\"boot.cp\">\n        <pathelement location=\"${sdk.build}/graal-sdk.jar\" />\n        <pathelement location=\"${truffle.build}/truffle-api.jar\" />\n    </path>\n    \n    <path id=\"common.cp\">\n        <pathelement location=\"${classes.dir}\" />\n    </path>\n\n    <path id=\"pe-tests.cp\">\n        <pathelement location=\"${compiler.build}/graal-test.jar\" />\n        <pathelement location=\"${compiler.build}/graal.jar\" />\n        <pathelement location=\"${compiler.build}/graal-only-test.jar\" />\n        <pathelement location=\"${compiler.build}/graal-truffle-compiler-libgraal.jar\" />\n    </path>\n\n    <path id=\"som.cp\">\n        <path refid=\"boot.cp\"/>\n        <path refid=\"common.cp\"/>\n        <pathelement location=\"${unit.dir}\" />\n\n        <pathelement location=\"${lib.dir}/junit-${junit.version}.jar\" />\n        <pathelement location=\"${lib.dir}/hamcrest-core-1.3.jar\" />\n\n        <pathelement location=\"${truffle.build}/truffle-dsl-processor.jar\" />\n\n        <path refid=\"pe-tests.cp\"/>\n    </path>\n\n    <available file=\"${jvmci.home}\"  type=\"dir\" property=\"jvmci.home.present\" />\n\n    <condition property=\"truffle.and.jvmci.present\">\n      <and>\n        <available file=\"${truffle.dir}\" />\n        <available file=\"${jvmci.home}\" />\n       </and>\n    </condition>\n    \n    <target name=\"help\" description=\"Prints out help message, documenting the usage\">\n        <echo>Usage\n=====\n\n-p            print all supported commands/targets\n-Dskip.libs   prevent jvmci-libs target from running, thus, a JVMCI-enabled JDK is not downloaded\n\nNative Image Targets\n====================\n\n-Dno.jit      compile a native image with JIT compilation disabled\n-Ddump.method=MethodFilter  dump compiler graphs for the selected methods\n  for MethodFilter syntax see https://github.com/oracle/graal/blob/master/compiler/src/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/doc-files/MethodFilterHelp.txt</echo>\n    </target>\n\n    <target name=\"clean-som\" description=\"Remove build directories and generated code\">\n        <delete dir=\"${build.dir}\"/>\n        <delete dir=\"${src_gen.dir}\"/>\n    </target>\n    \n    <target name=\"clean-jvmci\" description=\"Remove the JVMCI library\">\n        <delete dir=\"${lib.dir}/jvmci\"/>\n        <delete file=\"${lib.dir}/jvmci.tar.gz\"/>\n    </target>\n    \n    <target name=\"clean-ide\" description=\"Remove Eclipse Projects\">\n        <exec executable=\"${mx.cmd}\" dir=\"${truffle.dir}\">\n          <arg value=\"--dynamicimports\"/>\n          <arg value=\"../sdk\"/>\n          <arg value=\"ideclean\"/>\n        </exec>\n    </target>\n    \n    <target name=\"clean\" depends=\"clean-som\">\n    </target>\n\n    <target name=\"clean-truffle\" if=\"truffle.and.jvmci.present\">\n        <exec executable=\"${mx.cmd}\" dir=\"${vm.dir}\">\n          <arg value=\"--dynamicimports\"/>\n          <arg value=\"../substratevm,../tools,../truffle,../sdk,../compiler\"/>\n          <arg value=\"clean\"/>\n          <env key=\"JAVA_HOME\" value=\"${jvmci.home}\" />\n        </exec>\n    </target>\n    \n    <target name=\"clobber-truffle\" >\n      <exec executable=\"git\" dir=\"${lib.dir}/truffle\">\n        <arg line=\"clean -f -f -d -x\" />\n      </exec>\n    </target>\n\n    <target name=\"clobber\" description=\"Do clean, and also clean truffle build\"\n        depends=\"clean-som,clobber-truffle,clean-jvmci\">\n    </target>\n\n    <target name=\"check-core-lib-available\">\n        <available file=\"core-lib/.git\" property=\"core-lib.present\"/>\n    </target>\n    <target name=\"core-lib\" depends=\"check-core-lib-available\"\n            unless=\"core-lib.present\">\n      <exec executable=\"git\">\n        <arg value=\"submodule\" />\n        <arg value=\"update\" />\n        <arg value=\"--init\" />\n      </exec>\n    </target>\n\n    <target name=\"truffle-libs\" depends=\"jvmci-libs\">\n        <exec executable=\"${mx.cmd}\" dir=\"${compiler.dir}\" failonerror=\"true\">\n            <env key=\"DYNAMIC_IMPORTS\" value=\"/tools\" />\n            <env key=\"EXCLUDE_COMPONENTS\" value=\"svmag,nju,nic,ni,nil,ins,dap,lsp,insight,insightheap,vvm\" />\n            <arg value=\"build\"/>\n            <arg value=\"--no-native\"/>\n            <env key=\"JAVA_HOME\" value=\"${jvmci.home}\" />\n        </exec>\n    </target>\n    \n    <target name=\"libgraal-jdk\" depends=\"jvmci-libs\">\n        <exec executable=\"${mx.cmd}\" dir=\"${vm.dir}\" failonerror=\"true\">\n            <env key=\"JAVA_HOME\" value=\"${jvmci.home}\" />\n            <!-- REM: This needs to match ./som -->\n            <env key=\"DYNAMIC_IMPORTS\" value=\"/substratevm,/tools,/truffle,/sdk,/compiler\" />\n            <env key=\"FORCE_BASH_LAUNCHERS\" value=\"true\" />\n            <env key=\"DISABLE_LIBPOLYGLOT\" value=\"true\" />\n            <env key=\"EXCLUDE_COMPONENTS\" value=\"svmag,nju,nic,ni,nil,ins,dap,lsp,insight,insightheap,vvm\" />\n            <arg line=\"build\"/>\n        </exec>\n    </target>\n\n    <target name=\"ideinit\" depends=\"core-lib\">\n        <exec executable=\"${mx.cmd}\" dir=\"${svm.dir}\">\n          <env key=\"JAVA_HOME\" value=\"${jvmci.home}\" />\n          <arg value=\"--dynamicimports\"/>\n          <arg value=\"../sdk,../tools,../substratevm,../truffle,../compiler\"/>\n          <arg value=\"eclipseinit\"/>\n        </exec>\n    </target>\n\n    <target name=\"ideclean\" depends=\"core-lib\">\n        <exec executable=\"${mx.cmd}\" dir=\"${compiler.dir}\">\n          <arg value=\"--dynamicimports\"/>\n          <arg value=\"../sdk\"/>\n          <arg value=\"ideclean\"/>\n        </exec>\n    </target>\n\n    <target name=\"jvmci-libs\" unless=\"skip.libs\" depends=\"core-lib\">\n        <exec executable=\"${mx.cmd}\" dir=\"${compiler.dir}\">\n            <arg line=\"fetch-jdk --jdk-id ${labs-jdk} --alias ${lib.dir}/jvmci\" />\n        </exec>\n    </target>\n\n    <target name=\"jvmci-home\">\n        <echo>${jvmci.home}</echo>\n    </target>\n\n    <target name=\"libs\" depends=\"core-lib\">\n        <get src=\"https://repo1.maven.org/maven2/junit/junit/${junit.version}/junit-${junit.version}.jar\"\n            usetimestamp=\"true\"\n            dest=\"${lib.dir}/junit-${junit.version}.jar\" />\n        <get src=\"https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar\"\n            usetimestamp=\"true\"\n            dest=\"${lib.dir}/hamcrest-core-1.3.jar\" />\n    </target>\n\n    <target name=\"eclipseformat\">\n      <pathconvert pathsep=\" \" property=\"javafiles\">\n        <fileset dir=\"${src.dir}\">\n          <include name=\"**/*.java\"/>\n        </fileset>\n        <fileset dir=\"${unit.dir}\">\n          <include name=\"**/*.java\"/>\n        </fileset>\n      </pathconvert>\n      <exec executable=\"${env.ECLIPSE_EXE}\" dir=\"${basedir}\">\n          <arg value=\"-nosplash\"/>\n          <arg value=\"-application\"/>\n          <arg value=\"-consolelog\"/>\n          <arg value=\"-data\"/>\n          <arg value=\"${basedir}\"/>\n          <arg value=\"-vm\"/>\n          <arg value=\"${env.JAVA_HOME}/bin/java\"/>\n          <arg value=\"org.eclipse.jdt.core.JavaCodeFormatter\"/>\n          <arg value=\"-config\"/>\n          <arg value=\"${basedir}/.settings/org.eclipse.jdt.core.prefs\"/>\n          <arg line=\"${javafiles}\"/>\n      </exec>\n  </target>\n\n  <target name=\"eclipseformat-check\" depends=\"eclipseformat\">\n      <exec executable=\"git\" dir=\"${basedir}\">\n          <arg value=\"status\" />\n          <arg value=\"*.java\" />\n      </exec>\n      <exec executable=\"git\" dir=\"${basedir}\" failonerror=\"true\">\n          <arg value=\"diff-index\" />\n          <arg value=\"--quiet\" />\n          <arg value=\"--exit-code\" />\n          <arg value=\"--ignore-submodules\" />\n          <arg value=\"HEAD\" />\n      </exec>\n    </target>\n\n    <target name=\"checkstyle-jar\">\n        <mkdir dir=\"${lib.dir}\" />\n        <get src=\"https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${checkstyle.version}/checkstyle-${checkstyle.version}-all.jar\"\n            usetimestamp=\"true\"\n            dest=\"${lib.dir}/checkstyle-${checkstyle.version}-all.jar\" />\n    </target>\n\n    <target name=\"checkstyle\" depends=\"checkstyle-jar\" description=\"Check Code with Checkstyle\">\n        <taskdef resource=\"com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties\" classpath=\"${lib.dir}/checkstyle-${checkstyle.version}-all.jar\" />\n        <checkstyle config=\".checkstyle_checks.xml\">\n          <fileset dir=\"${src.dir}\" includes=\"**/*.java\"/>\n          <fileset dir=\"${unit.dir}\" includes=\"**/*.java\"/>\n          <formatter type=\"plain\"/>\n        </checkstyle>\n    </target>\n\n    <target name=\"compile-som\" description=\"Compile TruffleSOM, without dependencies\">\n        <mkdir dir=\"${build.dir}\"/>\n        <mkdir dir=\"${classes.dir}\" />\n        <mkdir dir=\"${src_gen.dir}\" />\n        <javac fork=\"true\" includeantruntime=\"false\" srcdir=\"${src.dir}\" destdir=\"${classes.dir}\" debug=\"true\"> <!-- for debugging: fork=\"true\"  -->\n          <classpath refid=\"som.cp\" />\n          <compilerarg line=\"-s ${src_gen.dir}\" />\n          <compilerarg line=\"-XDignore.symbol.file\" />\n          <compilerarg line=\"-Xlint:all,-unchecked\" />\n        </javac>\n        <javac includeantruntime=\"false\" srcdir=\"${src_gen.dir}\" destdir=\"${classes.dir}\" debug=\"true\">\n          <classpath refid=\"som.cp\" />\n          <compilerarg line=\"-s ${src_gen.dir}\" />\n          <compilerarg line=\"-Xlint:-unchecked\" />\n        </javac>\n        <javac includeantruntime=\"false\" srcdir=\"${unit.dir}\" destdir=\"${classes.dir}\" debug=\"true\">\n          <classpath refid=\"som.cp\" />\n        </javac>\n    </target>\n\n    <target name=\"compile-for-jar\" depends=\"truffle-libs,libs,compile-som\" description=\"Compile TruffleSOM without LibGraal\">\n    </target>\n    \n    <target name=\"compile\" depends=\"libgraal-jdk,libs,compile-som\" description=\"Compile TruffleSOM with LibGraal\">\n    </target>\n\n    <target name=\"jar\" depends=\"compile-for-jar\" description=\"Package as JAR\">\n        <jar destfile=\"${build.dir}/som.jar\" basedir=\"${classes.dir}\"></jar>\n    </target>\n\n    <target name=\"test\" depends=\"compile-for-jar,unit-test\" description=\"Execute tests\" />\n\n    <!-- I hate the Java module system -->\n    <resources id=\"add-opens-extravaganza\">\n        <string>--add-opens=jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED</string>\n        <string>--add-opens=org.graalvm.truffle/com.oracle.truffle.api=ALL-UNNAMED</string>\n        <string>--add-opens=org.graalvm.truffle/com.oracle.truffle.api.instrumentation=ALL-UNNAMED</string>\n        <string>--add-opens=org.graalvm.truffle/com.oracle.truffle.api.interop=ALL-UNNAMED</string>\n        <string>--add-opens=org.graalvm.truffle/com.oracle.truffle.api.nodes=ALL-UNNAMED</string>\n        <string>--add-opens=org.graalvm.truffle/com.oracle.truffle.api.source=ALL-UNNAMED</string>\n        <string>--add-opens=org.graalvm.truffle/com.oracle.truffle.api.dsl=ALL-UNNAMED</string>\n        <string>--add-opens=org.graalvm.truffle/com.oracle.truffle.api.frame=ALL-UNNAMED</string>\n\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.graph=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.phases=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.nodes.graphbuilderconf=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.serviceprovider=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.debug=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.runtime=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.options=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.api.runtime=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.core.target=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.truffle.runtime=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.truffle.compiler=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.truffle.common=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.printer=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.api.replacements=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.nodes=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.graph.iterators=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.nodes.cfg=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.hotspot=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.compiler/org.graalvm.compiler.truffle.compiler.phases=ALL-UNNAMED</string>\n\n        <string>--add-opens=jdk.internal.vm.ci/jdk.vm.ci.meta=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.ci/jdk.vm.ci.services=ALL-UNNAMED</string>\n        <string>--add-opens=jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED</string>\n    </resources>\n    <pathconvert property=\"add-opens-extravaganza\" refid=\"add-opens-extravaganza\" pathsep=\" \" />\n\n    <target name=\"unit-test\" description=\"Run unit tests\">\n        <junit haltonerror=\"false\" haltonfailure=\"false\" failureproperty=\"test.failed.ast\"\n            outputtoformatters=\"true\" fork=\"true\" jvm=\"${sdk.dir}/mxbuild/linux-amd64/GRAALVM_A402CF4705_JAVA17_STAGE1/graalvm-a402cf4705-java17-22.2.0-dev/bin/java\">\n\n            <jvmarg value=\"-ea\" />\n            <jvmarg value=\"-esa\" />\n            <jvmarg value=\"-Dsom.interp=AST\" />\n            <jvmarg value=\"-Dpolyglot.engine.WarnInterpreterOnly=false\" />\n\n            <!-- Debugging purposes. Needs the -Ddebugmode=1 argument. -->\n            <jvmarg if:set=\"debugmode\" value=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8080\"/>\n\n            <jvmarg line=\"-Dtruffle.class.path.append=/home/octavel/PhD_Programs/my_programs/TruffleSOM/build/classes:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/sdk/mxbuild/dists/graal-sdk.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/sdk/mxbuild/dists/graal.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/sdk/mxbuild/dists/graal-test.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/sdk/mxbuild/dists/graal-truffle-compiler-libgraal.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/sdk/mxbuild/dists/graal-libgraal-processor.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/truffle/mxbuild/dists/truffle-api.jar:\" />\n            <jvmarg line=\"--module-path=/home/octavel/PhD_Programs/my_programs/TruffleSOM/graal.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/graal-test.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/sdk/mxbuild/dists/graal-sdk.jar:/home/octavel/PhD_Programs/my_programs/TruffleSOM/libs/truffle/truffle/mxbuild/dists/truffle-api.jar\" />\n\n            <jvmarg line=\"${add-opens-extravaganza}\" />\n\n            <classpath refid=\"som.cp\" />\n\n            <batchtest filtertrace=\"false\">\n              <fileset dir=\"tests\">\n<!--                  <include name=\"**/*Test*.java\"/>-->\n                  <include name=\"**/PartialEvalTests.java\"/>\n              </fileset>\n            </batchtest>\n            <formatter type=\"brief\" usefile=\"false\"/>\n        </junit>\n\n<!--        <junit haltonerror=\"false\" haltonfailure=\"false\" failureproperty=\"test.failed.bc\"-->\n<!--            outputtoformatters=\"true\">-->\n<!--            <jvmarg value=\"-ea\" />-->\n<!--            <jvmarg value=\"-esa\" />-->\n<!--            <jvmarg value=\"-Dsom.interp=BC\" />-->\n<!--            <jvmarg value=\"-Dpolyglot.engine.WarnInterpreterOnly=false\" />-->\n<!--            <classpath refid=\"som.cp\" />-->\n<!--            <batchtest fork=\"yes\" filtertrace=\"false\">-->\n<!--              <fileset dir=\"tests\">-->\n<!--                  <include name=\"**/*Test*.java\"/>-->\n<!--              </fileset>-->\n<!--            </batchtest>-->\n<!--            <formatter type=\"brief\" usefile=\"false\"/>-->\n<!--        </junit>-->\n\n<!--        <java classname=\"trufflesom.vm.Universe\" fork=\"true\" failonerror=\"true\">-->\n<!--            <classpath refid=\"som.cp\" />-->\n<!--            <jvmarg value=\"-ea\" />-->\n<!--            <jvmarg value=\"-esa\" />-->\n<!--            <jvmarg value=\"-Dpolyglot.engine.WarnInterpreterOnly=false\" />-->\n<!--            <arg line=\"-cp Smalltalk TestSuite/TestHarness.som &#45;&#45;ignore-inefficacies\" />-->\n<!--        </java>-->\n<!--        <fail message=\"Basic tests failed for AST interpreter.\" if=\"test.failed.ast\" />-->\n<!--        <fail message=\"Basic tests failed for BC interpreter.\" if=\"test.failed.bc\" />-->\n    </target>\n\n    <target name=\"som-test\" depends=\"compile-for-jar\" description=\"Test som script\">\n        <exec executable=\"./som\" failonerror=\"true\">\n            <arg value=\"-G\" />\n            <arg value=\"--no-embedded-graal\" />\n            <arg value=\"-Dsom.interp=AST\" />\n            <arg value=\"-cp\" />\n            <arg value=\"Smalltalk\" />\n            <arg value=\"TestSuite/TestHarness.com\" />\n        </exec>\n        \n        <exec executable=\"./som\" failonerror=\"true\">\n            <arg value=\"-G\" />\n            <arg value=\"--no-embedded-graal\" />\n            <arg value=\"-Dsom.interp=BC\" />\n            <arg value=\"-cp\" />\n            <arg value=\"Smalltalk\" />\n            <arg value=\"TestSuite/TestHarness.com\" />\n        </exec>\n    </target>\n\n    <target name=\"native-tests\" depends=\"native-ast\">\n      <exec executable=\"${src.dir}/../som-native-ast\" failonerror=\"true\">\n          <arg value=\"-cp\" />\n          <arg value=\"Smalltalk\" />\n          <arg value=\"TestSuite/TestHarness.com\" />\n      </exec>\n    </target>\n    \n    <target name=\"nodestats-test\">\n        <exec executable=\"tests/tools/nodestats/test.sh\" failonerror=\"true\">\n        </exec>\n    </target>\n    \n    <target name=\"coverage-test\">\n        <exec executable=\"tests/tools/coverage/test.sh\" failonerror=\"true\">\n        </exec>\n    </target>\n    \n    <target name=\"tools-test\" depends=\"compile-for-jar,nodestats-test,coverage-test\" description=\"Test Tools\">\n    </target>\n    \n    <target name=\"tests\" depends=\"test,som-test\" />\n    \n    <target name=\"update-test-data\" depends=\"compile-for-jar\" description=\"Update expected test data\">\n        <exec executable=\"tests/tools/nodestats/test.sh\" failonerror=\"true\">\n          <arg value=\"update\" />\n        </exec>\n        <exec executable=\"tests/tools/coverage/test.sh\" failonerror=\"true\">\n          <arg value=\"update\" />\n        </exec>\n    </target>\n\n    <target name=\"compile-svm\">\n      <exec executable=\"${mx.cmd}\" dir=\"${svm.dir}\" failonerror=\"true\">\n        <env key=\"JAVA_HOME\" value=\"${jvmci.home}\" />\n        <arg line=\"build\" />\n      </exec>\n    </target>\n\n    <macrodef name=\"native-image\">\n        <attribute name=\"exe\"/>\n        <attribute name=\"dir\"/>\n        <attribute name=\"java-home\"/>\n        <attribute name=\"is-ce\" default=\"true\" />\n        <attribute name=\"type\" />\n        <attribute name=\"out\" />\n        <attribute name=\"out-interp\" />\n\n        <sequential>\n            <exec executable=\"@{exe}\" dir=\"@{dir}\" failonerror=\"true\">\n              <env key=\"JAVA_HOME\" value=\"@{java-home}\" />\n              <arg line=\"native-image\" if:true=\"@{is-ce}\" />\n              <arg line=\"--macro:truffle --no-fallback\" />\n              \n              <arg line=\"--initialize-at-build-time='bd,tools,trufflesom,org.graalvm.graphio'\" if:set=\"dump.method\" />\n              <arg line=\"--initialize-at-build-time='bd,tools,trufflesom'\"                 unless:set=\"dump.method\" />\n              <arg line=\"-H:Dump= -H:PrintGraph=File -H:MethodFilter=${dump.method}\"           if:set=\"dump.method\" />\n              \n              <arg line=\"--allow-incomplete-classpath -H:+ReportExceptionStackTraces\" />\n              \n              <arg line=\"--gc=G1\" unless:true=\"@{is-ce}\" if:blank=\"${home.ext}\" />\n              <arg line=\"-H:-DeleteLocalSymbols\" />\n              <arg line=\"-Dsom.interp=@{type}\" />\n              <!-- <arg line=\"-H:+PrintAnalysisCallTree\" /> -->\n              <arg line=\"-Dsom.jitCompiler=false\" if:true=\"${no.jit}\" />\n              <!-- <arg line=\"-Dbd.settings=som.vm.VmSettings\" /> -->\n\n              <!-- <arg line=\"-H:+PrintRuntimeCompileMethods\" /> -->\n              <!-- <arg line=\"-H:+PrintMethodHistogram\" />\n                   <arg line=\"-H:+RuntimeAssertions\" />\n                   <arg line=\"-H:+EnforceMaxRuntimeCompileMethods\" /> -->\n\n              <arg line=\"-cp ${ant.refid:common.cp}\" />\n              <arg line=\"trufflesom.vm.Universe\" />\n              <arg line=\"@{out}\" />\n            </exec>\n            <move file=\"@{dir}/@{out}\" todir=\"${src.dir}/../\" />\n            <move file=\"${src.dir}/../@{out}\" tofile=\"${src.dir}/../@{out-interp}\" if:true=\"${no.jit}\" />\n        </sequential>\n    </macrodef>\n\n    <target name=\"native-deps\" depends=\"truffle-libs,libs,jvmci-libs,compile-svm,compile-som\" />\n\n    <target name=\"native-ast\" depends=\"native-deps,compile-native-ast\"></target>\n    <target name=\"compile-native-ast\">\n      <native-image exe=\"${mx.cmd}\" dir=\"${svm.dir}\" java-home=\"${jvmci.home}\"\n          type=\"AST\" out=\"som-native-ast\" out-interp=\"som-native-interp-ast\" />\n    </target>\n\n    <target name=\"native-bc\" depends=\"native-deps,compile-native-bc\"></target>\n    <target name=\"compile-native-bc\">\n      <native-image exe=\"${mx.cmd}\" dir=\"${svm.dir}\" java-home=\"${jvmci.home}\"\n          type=\"BC\" out=\"som-native-bc\" out-interp=\"som-native-interp-bc\" />\n    </target>\n    \n    <target name=\"native-ast-ee\" depends=\"native-deps,compile-native-ast-ee\"></target>\n    <target name=\"compile-native-ast-ee\">\n      <native-image exe=\"${env.GRAALEE_HOME}/bin/native-image\"\n          dir=\"${build.dir}\" java-home=\"${env.GRAALEE_HOME}\" is-ce=\"false\"\n          type=\"AST\" out=\"som-native-ast-ee\" out-interp=\"som-native-interp-ast-ee\" />\n    </target>\n\n    <target name=\"native-bc-ee\" depends=\"native-deps,compile-native-bc-ee\"></target>\n    <target name=\"compile-native-bc-ee\">\n      <native-image exe=\"${env.GRAALEE_HOME}/bin/native-image\"\n          dir=\"${build.dir}\" java-home=\"${env.GRAALEE_HOME}\" is-ce=\"false\"\n          type=\"BC\" out=\"som-native-bc-ee\" out-interp=\"som-native-interp-bc-ee\" />\n    </target>\n\n    <target name=\"native-obj-storage-test\" depends=\"truffle-libs,libs,jvmci-libs,compile-svm,compile-som,compile-native-obj-storage-test\"></target>\n\n    <target name=\"compile-native-obj-storage-test\">\n      <exec executable=\"${mx.cmd}\" dir=\"${svm.dir}\" failonerror=\"true\">\n        <env key=\"JAVA_HOME\" value=\"${jvmci.home}\" />\n        <arg line=\"native-image\" />\n        <arg line=\"--macro:truffle --no-fallback --initialize-at-build-time -H:+ReportExceptionStackTraces\" />\n        <arg line=\"-cp ${ant.refid:common.cp}\" />\n        <arg line=\"trufflesom.intepreter.objectstorage.BasicStorageTester\" />\n        <arg line=\"som-obj-storage-tester\" />\n      </exec>\n\n      <move file=\"${svm.dir}/som-obj-storage-tester\" todir=\"${src.dir}/../\" />\n            \n      <exec executable=\"${src.dir}/../som-obj-storage-tester\" failonerror=\"true\" />\n    </target>\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.xml b/build.xml
--- a/build.xml	(revision 582878202f6517b9516cb23a4c3eb66d48961fc5)
+++ b/build.xml	(date 1661440219997)
@@ -329,7 +329,7 @@
 
     <target name="unit-test" description="Run unit tests">
         <junit haltonerror="false" haltonfailure="false" failureproperty="test.failed.ast"
-            outputtoformatters="true" fork="true" jvm="${sdk.dir}/mxbuild/linux-amd64/GRAALVM_A402CF4705_JAVA17_STAGE1/graalvm-a402cf4705-java17-22.2.0-dev/bin/java">
+            outputtoformatters="true" fork="true" jvm="${sdk.dir}/mxbuild/linux-amd64/GRAALVM_1AB71B6E79_JAVA17_STAGE1/graalvm-1ab71b6e79-java17-22.3.0-dev/bin/java">
 
             <jvmarg value="-ea" />
             <jvmarg value="-esa" />
Index: tests/trufflesom/supernodes/partialeval/PartialEvalTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package trufflesom.supernodes.partialeval;\n\nimport bdt.basic.ProgramDefinitionError;\nimport bdt.source.SourceCoordinate;\nimport bdt.tools.structure.StructuralProbe;\nimport com.oracle.truffle.api.frame.FrameSlotKind;\nimport com.oracle.truffle.api.frame.VirtualFrame;\nimport com.oracle.truffle.api.nodes.RootNode;\nimport com.oracle.truffle.api.source.Source;\n\n//import jdk.vm.ci.meta.ResolvedJavaMethod;\n//import jdk.vm.ci.meta.ResolvedJavaMethod;\nimport jdk.vm.ci.meta.ResolvedJavaMethod;\nimport org.graalvm.collections.EconomicMap;\nimport org.graalvm.compiler.code.CompilationResult;\nimport org.graalvm.compiler.debug.DebugCloseable;\nimport org.graalvm.compiler.debug.DebugContext;\nimport org.graalvm.compiler.debug.DebugOptions;\nimport org.graalvm.compiler.debug.GraalError;\nimport org.graalvm.compiler.graph.Node;\nimport org.graalvm.compiler.graph.iterators.NodeIterable;\nimport org.graalvm.compiler.java.BytecodeParser;\nimport org.graalvm.compiler.java.GraphBuilderPhase;\nimport org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration;\nimport org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext;\nimport org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins;\nimport org.graalvm.compiler.nodes.java.MethodCallTargetNode;\nimport org.graalvm.compiler.options.OptionKey;\nimport org.graalvm.compiler.options.OptionValues;\nimport org.graalvm.compiler.phases.OptimisticOptimizations;\nimport org.graalvm.compiler.phases.util.Providers;\nimport org.graalvm.compiler.truffle.test.PartialEvaluationTest;\n\nimport org.graalvm.polyglot.Context;\nimport org.junit.Test;\n\nimport org.graalvm.compiler.nodes.StructuredGraph;\nimport org.graalvm.compiler.nodes.cfg.ControlFlowGraph;\nimport org.graalvm.compiler.truffle.runtime.OptimizedCallTarget;\nimport trufflesom.compiler.*;\nimport trufflesom.interpreter.Method;\nimport trufflesom.interpreter.SomLanguage;\nimport trufflesom.interpreter.nodes.ExpressionNode;\nimport trufflesom.interpreter.nodes.LocalVariableNodeFactory;\nimport trufflesom.interpreter.nodes.SequenceNode;\nimport trufflesom.interpreter.objectstorage.StorageAnalyzer;\nimport trufflesom.interpreter.supernodes.LocalVariableReadSquareWriteNodeGen;\nimport trufflesom.interpreter.supernodes.LocalVariableSquareNode;\nimport trufflesom.vm.Universe;\nimport trufflesom.vmobjects.SClass;\nimport trufflesom.vmobjects.SInvokable;\nimport trufflesom.vmobjects.SSymbol;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertThat;\nimport static trufflesom.vm.SymbolTable.symSelf;\nimport static trufflesom.vm.SymbolTable.symbolFor;\n\npublic class PartialEvalTests extends PartialEvaluationTest {\n    private static final boolean NO_SUPERNODES = true;\n    private static final boolean SUPERNODES_ON = false;\n\n    protected ClassGenerationContext cgenc;\n    protected MethodGenerationContext mgenc;\n\n    static {\n        initTruffle();\n    }\n\n//    private static class TestSupernodeRootNode extends RootNode {\n//        @Child private LocalVariableSquareNode superNode;\n//        @Child private SequenceNode seqSuperNode;\n//\n//        TestSupernodeRootNode(LocalVariableSquareNode superNode) {\n//            super(null);\n//            this.superNode = superNode;\n//        }\n//\n//        TestSupernodeRootNode(SequenceNode seqSuperNode) {\n//            super(null);\n//            this.seqSuperNode = seqSuperNode;\n//            this.getFrameDescriptor().addFrameSlot(1, FrameSlotKind.Long);\n//            this.getFrameDescriptor().addFrameSlot(2, FrameSlotKind.Long);\n//            this.getFrameDescriptor().addFrameSlot(5, FrameSlotKind.Long);\n//            this.getFrameDescriptor().addFrameSlot(6, FrameSlotKind.Long);\n//            this.getFrameDescriptor().addFrameSlot(7, FrameSlotKind.Long);\n////            this.getFrameDescriptor().addFrameSlot(1);\n//        }\n//\n//        @Override\n//        public Object execute(VirtualFrame frame) {\n////            return this.superNode.executeGeneric(frame);\n//            frame.setLong(1, 10);\n////            frame.getArguments()d\n//            return this.seqSuperNode.executeGeneric(frame);\n//        }\n//    }\n\n    private static void initTruffle() {\n        StorageAnalyzer.initAccessors();\n\n        Context.Builder builder = Universe.createContextBuilder();\n        builder.logHandler(System.err);\n\n        Context context = builder.build();\n        context.eval(SomLanguage.INIT);\n\n        Universe.selfSource = SomLanguage.getSyntheticSource(\"self\", \"self\");\n        Universe.selfCoord = SourceCoordinate.createEmpty();\n    }\n\n    protected SInvokable parseMethodInvokable(final String source, boolean noSupernodes) {\n        Source s = SomLanguage.getSyntheticSource(source, \"test\");\n\n        cgenc = new ClassGenerationContext(s, null);\n        cgenc.setName(symbolFor(\"Test\"));\n//        addAllFields();\n\n        mgenc = new MethodGenerationContext(cgenc, (StructuralProbe<SSymbol, SClass, SInvokable, Field, Variable>) null);\n        mgenc.addArgumentIfAbsent(symSelf, 0);\n\n        ParserAst parser = new ParserAst(source, s, null);\n        parser.setNoSupernodes(noSupernodes);\n\n        try {\n            ExpressionNode parsedMethod = parser.method(mgenc);\n            return mgenc.assemble(parsedMethod, 0);\n//            return mgenc.assemble(((SequenceNode) parsedMethod).expressions[2], 0);\n\n        } catch (ProgramDefinitionError e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    protected ExpressionNode parseMethodExpression(final String source, boolean noSupernodes) {\n        Source s = SomLanguage.getSyntheticSource(source, \"test\");\n\n        cgenc = new ClassGenerationContext(s, null);\n        cgenc.setName(symbolFor(\"Test\"));\n//        addAllFields();\n\n        mgenc = new MethodGenerationContext(cgenc, (StructuralProbe<SSymbol, SClass, SInvokable, Field, Variable>) null);\n        mgenc.addArgumentIfAbsent(symSelf, 0);\n\n        ParserAst parser = new ParserAst(source, s, null);\n        parser.setNoSupernodes(noSupernodes);\n        try {\n            return parser.method(mgenc);\n        } catch (ProgramDefinitionError e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    protected <T> T readSequenceExpressions(final Object obj, final String fieldName, final Class<T> c) {\n        java.lang.reflect.Field field = lookupClassField(obj.getClass(), fieldName);\n        field.setAccessible(true);\n        try {\n            return c.cast(field.get(obj));\n        } catch (IllegalAccessException | IllegalArgumentException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private java.lang.reflect.Field lookupClassField(final Class<?> cls, final String fieldName) {\n        try {\n            return cls.getDeclaredField(fieldName);\n        } catch (NoSuchFieldException e) {\n            if (cls.getSuperclass() != null) {\n                return lookupClassField(cls.getSuperclass(), fieldName);\n            }\n        } catch (SecurityException e) {\n            throw new RuntimeException(e);\n        }\n        throw new RuntimeException(\"Didn't find field: \" + fieldName);\n    }\n\n    boolean compareStructuredGraphs(StructuredGraph graph1, StructuredGraph graph2) {\n        if (graph1.getNodeCount() != graph2.getNodeCount())\n            return false;\n\n        Iterator<Node> graph1Iterator = graph1.getNodes().iterator();\n        Iterator<Node> graph2Iterator = graph2.getNodes().iterator();\n\n        while (graph1Iterator.hasNext()) {\n            Node n1 = graph1Iterator.next();\n            Node n2 = graph2Iterator.next();\n\n//            System.out.println(n1 + \",\" + n2 + \"===> \" + n1.valueEquals(n2)); // Works for most but fails for FrameState, HotSpotOptimizedCallTarget, FrameDescriptor...\n\n            if (!n1.getClass().equals(n2.getClass()))\n                return false;\n        }\n        return true;\n    }\n\n    @Test\n    public void testLoopConditionProfile() {\n        // Must not compile immediately, the profile is not initialized until the first execution.\n        setupContext(Context.newBuilder().allowExperimentalOptions(true).option(\"engine.CompileImmediately\", \"false\").option(\"engine.BackgroundCompilation\", \"false\").build());\n        this.getContext().eval(SomLanguage.INIT);\n\n        // can be uncommented to deactivate execution before compilation, but graphs will just be a transferToInterpreter()\n//        this.preventProfileCalls = true;\n\n        String squareCodeStr = \"test = ( | l1 l2 l3 l4 | l2 := 100.0 atRandom. l3 := 0.01. l3 := l2 * l2. ^ l3 )\";\n//        String squareCodeStr = \"test = ( | l1 l2 l3 l4 | \" +\n//                \"l1 := 100.0 atRandom. l2 := 0.01. l2 := l1 * l1. \" +\n//                \"l3 := 100 atRandom. l4 := 0. l4 := l3 * l3.\" +\n//                \" ^ l2 + l4)\";\n\n//        String squareCodeStr = \"test = ( | l1 l2 l3 l4 | l3 := l3 * l3. ^ l3 )\";\n        String intIncrementLocalCodeStr = \"test = ( | l1 l2 l3 l4 | l2 := 100 atRandom. l2 := l2 + 42. ^ l3 )\";\n//        String intIncrementCodeStr = \"test = ( | l1 l2 l3 l4 | l2 := 100 atRandom. l3 := l3 + l2. ^ l3 )\";\n\n        String codeStr = squareCodeStr;\n       \n        ResolvedJavaMethod method = getResolvedJavaMethod(LocalVariableNodeFactory.LocalVariableReadNodeGen.class, \"executeGeneric\");\n        System.out.println(method);\n\n//        String codeStr = \"test: arg = ( | l3 | l3 := arg * arg. ^ l3 )\";\n        SInvokable sInvokableSn = parseMethodInvokable(codeStr, SUPERNODES_ON);\n        SInvokable sInvokableOg = parseMethodInvokable(codeStr, NO_SUPERNODES);\n        SequenceNode seqSn = (SequenceNode) parseMethodExpression(codeStr, SUPERNODES_ON);\n        SequenceNode seqOg = (SequenceNode) parseMethodExpression(codeStr, NO_SUPERNODES);\n\n\n//        ExpressionNode supernodeExpr = readSequenceExpressions(seqSn, \"expressions\", ExpressionNode[].class)[0];\n//        assertThat(supernodeExpr, instanceOf(LocalVariableSquareNode.class));\n\n//        TestSupernodeRootNode testSupernodeRootNode = new TestSupernodeRootNode((LocalVariableSquareNode) supernodeExpr);\n//        TestSupernodeRootNode testSupernodeRootNode = new TestSupernodeRootNode(seq);\n// Need something that can be called, so something that inherits from RootNode\n//        OptimizedCallTarget target = (OptimizedCallTarget) testSupernodeRootNode.getCallTarget();\n\n//        StructuredGraph graphOg = partialEval((OptimizedCallTarget) sInvokableOg.getCallTarget(),\n//                new HashMap<>(Map.of(\"dumpGraph\", \"sureWhyNot\", \"graphDescription\", \"original_graph\")));\n\n//        StructuredGraph graphSn = partialEval((OptimizedCallTarget) sInvokableSn.getCallTarget(),\n//                new HashMap<>(Map.of(\"dumpGraph\", \"yeahIAgree\", \"graphDescription\", \"supernode_graph\")));\n\n//        Object xdd = new BytecodeParser();\n//        System.out.println(\"GRAPH SIMILARITY: \" + compareStructuredGraphs(compile((OptimizedCallTarget) sInvokableSn.getCallTarget()), graphSn));\n//        System.out.println(graphSn + \"\\n\" + graphOg);\n\n//        ControlFlowGraph cfg = ControlFlowGraph.compute(graphSn, true, false, false, false);\n        // System.out.println(Arrays.toString(cfg.getBlocks()));\n\n//        System.out.println(\"GRAPH SIMILARITY: \" + compareStructuredGraphs(graphOg, graphSn));\n\n//        System.out.println(summoningSupernodeGraphThroughFuckery());\n    }\n\n    // source is pretty much CachingPEGraphDecoder\n  /*   public Object summoningSupernodeGraphThroughFuckery() {\n        StructuredGraph graphToEncode = null;// @formatter:off\n//        Method method = null;\n//        try {\n//            method = LocalVariableReadSquareWriteNodeGen.class.getMethod(\"executeGeneric\", VirtualFrame.class);\n//        } catch (NoSuchMethodException noSuchMethodException) {\n//            System.out.println(\"method not found\");\n//        }\n\n//         ResolvedJavaMethod method = null;\n         Object method = null; // on veut une resolvedjavamethod pas une Method qui est une classe de l'interpret'\n//         String codeStr = \"test = ( | l1 l2 l3 l4 | l2 := 100.0 atRandom. l3 := 0.01. l3 := l2 * l2. ^ l3 )\";\n//         SInvokable sInvokableSn = parseMethodInvokable(codeStr, SUPERNODES_ON);\n//         OptimizedCallTarget callTarget = (OptimizedCallTarget) sInvokableSn.getCallTarget();\n\n\n        System.out.println(method);\n\n//         MethodCallTargetNode methodCallTargetNode = null;\n//         Object method = methodCallTargetNode.targetMethod();\n//        methodCallTargetNode.targetMethod();\n\n        EconomicMap<OptionKey<?>, Object> optionsMap = EconomicMap.create();\n        optionsMap.put(DebugOptions.Dump, \":3\");\n        optionsMap.put(DebugOptions.PrintGraphHost, \"localhost\");\n        optionsMap.put(DebugOptions.PrintGraphPort, 4445);\n        optionsMap.put(DebugOptions.DescriptionStr, \"supernodeExecuteGeneric\");\n        OptionValues options = new OptionValues(optionsMap);\n\n        DebugContext debug = new DebugContext.Builder(new OptionValues(EconomicMap.create())).build();\n\n        // not the exact same config as PE does\n        GraphBuilderConfiguration graphBuilderConfig = GraphBuilderConfiguration.getDefault(new GraphBuilderConfiguration.Plugins(new InvocationPlugins()));\n\n//        TestSupernodeRootNode testSupernodeRootNode = new TestSupernodeRootNode(null);\n//        OptimizedCallTarget target = (OptimizedCallTarget) testSupernodeRootNode.getCallTarget();\n\n//        graphToEncode = new StructuredGraph.Builder(options, debug, StructuredGraph.AllowAssumptions.YES).\n//                profileProvider(null).\n//                trackNodeSourcePosition(graphBuilderConfig.trackNodeSourcePosition()).\n//                method(method).\n//                setIsSubstitution(false).\n////                cancellable(graph.getCancellable()).\n//                build();\n\n////        try (DebugContext.Scope scope = debug.scope(\"buildGraph\", graphToEncode); DebugCloseable a = BuildGraphTimer.start(debug)) {\n        IntrinsicContext initialIntrinsicContext = null;\n        Providers providers = null; // might need to initialize that to a better value\n        GraphBuilderPhase.Instance graphBuilderPhaseInstance = new GraphBuilderPhase.Instance(providers, graphBuilderConfig,\n                OptimisticOptimizations.ALL,\n                initialIntrinsicContext);\n        graphBuilderPhaseInstance.apply(graphToEncode);\n//        }\n        return graphToEncode;\n    }*/\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/trufflesom/supernodes/partialeval/PartialEvalTests.java b/tests/trufflesom/supernodes/partialeval/PartialEvalTests.java
--- a/tests/trufflesom/supernodes/partialeval/PartialEvalTests.java	(revision 582878202f6517b9516cb23a4c3eb66d48961fc5)
+++ b/tests/trufflesom/supernodes/partialeval/PartialEvalTests.java	(date 1661440045971)
@@ -8,9 +8,6 @@
 import com.oracle.truffle.api.nodes.RootNode;
 import com.oracle.truffle.api.source.Source;
 
-//import jdk.vm.ci.meta.ResolvedJavaMethod;
-//import jdk.vm.ci.meta.ResolvedJavaMethod;
-import jdk.vm.ci.meta.ResolvedJavaMethod;
 import org.graalvm.collections.EconomicMap;
 import org.graalvm.compiler.code.CompilationResult;
 import org.graalvm.compiler.debug.DebugCloseable;
@@ -218,8 +215,8 @@
 
         String codeStr = squareCodeStr;
        
-        ResolvedJavaMethod method = getResolvedJavaMethod(LocalVariableNodeFactory.LocalVariableReadNodeGen.class, "executeGeneric");
-        System.out.println(method);
+//        ResolvedJavaMethod method = getResolvedJavaMethod(LocalVariableNodeFactory.LocalVariableReadNodeGen.class, "executeGeneric");
+//        System.out.println(method);
 
 //        String codeStr = "test: arg = ( | l3 | l3 := arg * arg. ^ l3 )";
         SInvokable sInvokableSn = parseMethodInvokable(codeStr, SUPERNODES_ON);
@@ -239,8 +236,8 @@
 //        StructuredGraph graphOg = partialEval((OptimizedCallTarget) sInvokableOg.getCallTarget(),
 //                new HashMap<>(Map.of("dumpGraph", "sureWhyNot", "graphDescription", "original_graph")));
 
-//        StructuredGraph graphSn = partialEval((OptimizedCallTarget) sInvokableSn.getCallTarget(),
-//                new HashMap<>(Map.of("dumpGraph", "yeahIAgree", "graphDescription", "supernode_graph")));
+        StructuredGraph graphSn = partialEval((OptimizedCallTarget) sInvokableSn.getCallTarget(),
+                new HashMap<>(Map.of("dumpGraph", "yeahIAgree", "graphDescription", "supernode_graph")));
 
 //        Object xdd = new BytecodeParser();
 //        System.out.println("GRAPH SIMILARITY: " + compareStructuredGraphs(compile((OptimizedCallTarget) sInvokableSn.getCallTarget()), graphSn));
